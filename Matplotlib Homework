{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Observations and Insights"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Dependencies and starter code"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Mouse ID</th>\n",
       "      <th>Drug Regimen</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age_months</th>\n",
       "      <th>Weight (g)</th>\n",
       "      <th>Timepoint</th>\n",
       "      <th>Tumor Volume (mm3)</th>\n",
       "      <th>Metastatic Sites</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>k403</td>\n",
       "      <td>Ramicane</td>\n",
       "      <td>Male</td>\n",
       "      <td>21</td>\n",
       "      <td>16</td>\n",
       "      <td>0</td>\n",
       "      <td>45.000000</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>k403</td>\n",
       "      <td>Ramicane</td>\n",
       "      <td>Male</td>\n",
       "      <td>21</td>\n",
       "      <td>16</td>\n",
       "      <td>5</td>\n",
       "      <td>38.825898</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>k403</td>\n",
       "      <td>Ramicane</td>\n",
       "      <td>Male</td>\n",
       "      <td>21</td>\n",
       "      <td>16</td>\n",
       "      <td>10</td>\n",
       "      <td>35.014271</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>k403</td>\n",
       "      <td>Ramicane</td>\n",
       "      <td>Male</td>\n",
       "      <td>21</td>\n",
       "      <td>16</td>\n",
       "      <td>15</td>\n",
       "      <td>34.223992</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>k403</td>\n",
       "      <td>Ramicane</td>\n",
       "      <td>Male</td>\n",
       "      <td>21</td>\n",
       "      <td>16</td>\n",
       "      <td>20</td>\n",
       "      <td>32.997729</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  Mouse ID Drug Regimen   Sex  Age_months  Weight (g)  Timepoint  \\\n",
       "0     k403     Ramicane  Male          21          16          0   \n",
       "1     k403     Ramicane  Male          21          16          5   \n",
       "2     k403     Ramicane  Male          21          16         10   \n",
       "3     k403     Ramicane  Male          21          16         15   \n",
       "4     k403     Ramicane  Male          21          16         20   \n",
       "\n",
       "   Tumor Volume (mm3)  Metastatic Sites  \n",
       "0           45.000000                 0  \n",
       "1           38.825898                 0  \n",
       "2           35.014271                 1  \n",
       "3           34.223992                 1  \n",
       "4           32.997729                 1  "
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Dependencies and Setup\n",
    "import matplotlib.pyplot as plt\n",
    "import pandas as pd\n",
    "import scipy.stats as st\n",
    "import numpy as np \n",
    "from scipy.stats import linregress\n",
    "\n",
    "# Study data files\n",
    "mouse_metadata = \"data/Mouse_metadata.csv\"\n",
    "study_results = \"data/Study_results.csv\"\n",
    "\n",
    "# Read the mouse data and the study results\n",
    "mouse_metadata = pd.read_csv(mouse_metadata)\n",
    "study_results = pd.read_csv(study_results)\n",
    "\n",
    "# Combine the data into a single dataset\n",
    "df = mouse_metadata.merge(study_results, how = \"outer\")\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Summary statistics"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Mean</th>\n",
       "      <th>Median</th>\n",
       "      <th>Variance</th>\n",
       "      <th>STD</th>\n",
       "      <th>SEM</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Drug Regimen</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Capomulin</th>\n",
       "      <td>40.675741</td>\n",
       "      <td>41.557809</td>\n",
       "      <td>24.839296</td>\n",
       "      <td>4.983904</td>\n",
       "      <td>0.329346</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Ceftamin</th>\n",
       "      <td>52.591172</td>\n",
       "      <td>51.776157</td>\n",
       "      <td>39.069446</td>\n",
       "      <td>6.250556</td>\n",
       "      <td>0.469821</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Infubinol</th>\n",
       "      <td>52.884795</td>\n",
       "      <td>51.820584</td>\n",
       "      <td>42.886388</td>\n",
       "      <td>6.548770</td>\n",
       "      <td>0.492236</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Ketapril</th>\n",
       "      <td>55.235638</td>\n",
       "      <td>53.698743</td>\n",
       "      <td>68.188930</td>\n",
       "      <td>8.257659</td>\n",
       "      <td>0.603860</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Naftisol</th>\n",
       "      <td>54.331565</td>\n",
       "      <td>52.509285</td>\n",
       "      <td>65.817708</td>\n",
       "      <td>8.112811</td>\n",
       "      <td>0.596466</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Placebo</th>\n",
       "      <td>54.033581</td>\n",
       "      <td>52.288934</td>\n",
       "      <td>60.830138</td>\n",
       "      <td>7.799368</td>\n",
       "      <td>0.581331</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Propriva</th>\n",
       "      <td>52.322552</td>\n",
       "      <td>50.854632</td>\n",
       "      <td>42.088020</td>\n",
       "      <td>6.487528</td>\n",
       "      <td>0.512884</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Ramicane</th>\n",
       "      <td>40.216745</td>\n",
       "      <td>40.673236</td>\n",
       "      <td>23.383692</td>\n",
       "      <td>4.835669</td>\n",
       "      <td>0.320955</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Stelasyn</th>\n",
       "      <td>54.233149</td>\n",
       "      <td>52.431737</td>\n",
       "      <td>59.122106</td>\n",
       "      <td>7.689090</td>\n",
       "      <td>0.573111</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Zoniferol</th>\n",
       "      <td>53.236507</td>\n",
       "      <td>51.818479</td>\n",
       "      <td>48.266689</td>\n",
       "      <td>6.947423</td>\n",
       "      <td>0.516398</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                   Mean     Median   Variance       STD       SEM\n",
       "Drug Regimen                                                     \n",
       "Capomulin     40.675741  41.557809  24.839296  4.983904  0.329346\n",
       "Ceftamin      52.591172  51.776157  39.069446  6.250556  0.469821\n",
       "Infubinol     52.884795  51.820584  42.886388  6.548770  0.492236\n",
       "Ketapril      55.235638  53.698743  68.188930  8.257659  0.603860\n",
       "Naftisol      54.331565  52.509285  65.817708  8.112811  0.596466\n",
       "Placebo       54.033581  52.288934  60.830138  7.799368  0.581331\n",
       "Propriva      52.322552  50.854632  42.088020  6.487528  0.512884\n",
       "Ramicane      40.216745  40.673236  23.383692  4.835669  0.320955\n",
       "Stelasyn      54.233149  52.431737  59.122106  7.689090  0.573111\n",
       "Zoniferol     53.236507  51.818479  48.266689  6.947423  0.516398"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Generate a summary statistics table of mean, median, variance, standard deviation, and SEM of the tumor volume for each regimen\n",
    "\n",
    "# Statistics: \n",
    "mean = df.groupby([\"Drug Regimen\"])[\"Tumor Volume (mm3)\"].mean()\n",
    "median = df.groupby([\"Drug Regimen\"])[\"Tumor Volume (mm3)\"].median()\n",
    "variance = df.groupby([\"Drug Regimen\"])[\"Tumor Volume (mm3)\"].var(ddof = 0)\n",
    "std = df.groupby([\"Drug Regimen\"])[\"Tumor Volume (mm3)\"].std(ddof = 0)\n",
    "sem = df.groupby([\"Drug Regimen\"])[\"Tumor Volume (mm3)\"].sem(ddof = 1)\n",
    "\n",
    "# Create Data Frame: \n",
    "summary_df = pd.DataFrame(mean, columns = ['Mean'])\n",
    "summary_df['Mean']= mean\n",
    "summary_df['Median'] = median\n",
    "summary_df['Variance']= variance\n",
    "summary_df['STD']= std\n",
    "summary_df['SEM']= sem\n",
    "\n",
    "summary_df\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Bar plots"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1440x216 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "Capomulin    230\n",
       "Ramicane     228\n",
       "Ketapril     188\n",
       "Naftisol     186\n",
       "Zoniferol    182\n",
       "Stelasyn     181\n",
       "Placebo      181\n",
       "Infubinol    178\n",
       "Ceftamin     178\n",
       "Propriva     161\n",
       "Name: Drug Regimen, dtype: int64"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Generate a bar plot showing number of data points for each treatment regimen using pandas\n",
    "Drug_Regimen_data_point = df['Drug Regimen'].value_counts()\n",
    "Drug_Regimen_data_point.plot(kind=\"bar\",figsize=(20,3))\n",
    "plt.show()\n",
    "Drug_Regimen_data_point"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Generate a bar plot showing number of data points for each treatment regimen using pyplot\n",
    "Drug_Regimen_data_point.index\n",
    "plt.bar(Drug_Regimen_data_point.index, Drug_Regimen_data_point, color=\"lightblue\", align=\"center\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Pie plots"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Generate a pie plot showing the distribution of female versus male mice using pandas\n",
    "gender = df[\"Sex\"].value_counts()\n",
    "gender.plot(kind=\"pie\",title = \"Gender Distribution\", shadow=True, startangle=140,autopct=\"%1.1f%%\")\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Generate a pie plot showing the distribution of female versus male mice using pyplot\n",
    "\n",
    "labels = [\"Male\",\"Female\"]\n",
    "sizes = gender['Male'],gender['Female']\n",
    "colors = [\"lightblue\",\"pink\"]\n",
    "explode = (0,0)\n",
    "\n",
    "plt.pie(sizes, explode=explode, labels=labels, colors=colors,\n",
    "        autopct=\"%1.1f%%\", shadow=True, startangle=140)\n",
    "plt.title(\"Gender Distribution\")\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Quartiles, outliers and boxplots"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Tumor Volume (mm3)</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Mouse ID</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>b447</th>\n",
       "      <td>45.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>c326</th>\n",
       "      <td>81.321346</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>h531</th>\n",
       "      <td>92.784682</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>l558</th>\n",
       "      <td>137.593624</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>m756</th>\n",
       "      <td>92.010364</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          Tumor Volume (mm3)\n",
       "Mouse ID                    \n",
       "b447               45.000000\n",
       "c326               81.321346\n",
       "h531               92.784682\n",
       "l558              137.593624\n",
       "m756               92.010364"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Calculate the final tumor volume of each mouse across four of the most promising treatment regimens. Calculate the IQR and quantitatively determine if there are any potential outliers. \n",
    "new_index_df = df.set_index(\"Drug Regimen\")\n",
    "top4_treatment_df = new_index_df.loc[[\"Capomulin\",\"Ramicane\",\"Infubinol\",\"Ceftamin\"],[\"Mouse ID\",\"Tumor Volume (mm3)\"]]\n",
    "tumor_volume_by_mouse_df = top4_treatment_df.groupby(\"Mouse ID\").sum()\n",
    "tumor_volume_by_mouse_df.head()\n",
    "\n",
    "# Calculate Quartiles: \n",
    "q2 = tumor_volume_by_mouse_df.median()\n",
    "q1 = np.percentile(tumor_volume_by_mouse_df[\"Tumor Volume (mm3)\"],25)\n",
    "q3 = np.percentile(tumor_volume_by_mouse_df[\"Tumor Volume (mm3)\"],75)\n",
    "iqr = (q3 - q1)\n",
    "\n",
    "# Find Upper and Lower Boundaries: \n",
    "lower_boundary = q1 - (1.5 * iqr)\n",
    "upper_boundary = q3 + (1.5 * iqr)\n",
    "\n",
    "# Find lower outliners: \n",
    "lower_outliners = tumor_volume_by_mouse_df[tumor_volume_by_mouse_df <= lower_boundary]\n",
    "lower_outliners = lower_outliners.dropna()\n",
    "lower_outliners.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Tumor Volume (mm3)</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Mouse ID</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "Empty DataFrame\n",
       "Columns: [Tumor Volume (mm3)]\n",
       "Index: []"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Find upper outliners:\n",
    "upper_ouliners = tumor_volume_by_mouse_df[tumor_volume_by_mouse_df >= upper_boundary]\n",
    "upper_ouliners = upper_ouliners.dropna()\n",
    "upper_ouliners"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Generate a box plot of the final tumor volume of each mouse across four regimens of interest\n",
    "fig1, ax1 = plt.subplots()\n",
    "ax1.boxplot(tumor_volume_by_mouse_df[\"Tumor Volume (mm3)\"])\n",
    "plt.grid()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Line and scatter plots"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Generate a line plot of time point versus tumor volume for a mouse treated with Capomulin\n",
    "# Only Capomulin Treatment DataFrame: \n",
    "new_index_df = df.set_index(\"Drug Regimen\")\n",
    "Capomulin_df = new_index_df.loc[[\"Capomulin\"],[\"Mouse ID\",\"Timepoint\",\"Tumor Volume (mm3)\"]]\n",
    "Capomulin_reset_index_df = Capomulin_df.set_index(\"Mouse ID\")\n",
    "\n",
    "# Only mouse with ID s185(random pick) DataFrame: \n",
    "s185_df = Capomulin_reset_index_df.loc[[\"s185\"],[\"Timepoint\",\"Tumor Volume (mm3)\"]]\n",
    "plt.plot(s185_df[\"Timepoint\"],s185_df[\"Tumor Volume (mm3)\"])\n",
    "\n",
    "# Formatting: \n",
    "plt.title(\"Mouse ID s185\")\n",
    "plt.xlabel(\"Time Point\")\n",
    "plt.ylabel(\"Tumor Volume (mm3)\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Weight (g)</th>\n",
       "      <th>Tumor Volume (mm3)</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Mouse ID</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>b128</th>\n",
       "      <td>22</td>\n",
       "      <td>41.963636</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>b742</th>\n",
       "      <td>21</td>\n",
       "      <td>40.083699</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>f966</th>\n",
       "      <td>17</td>\n",
       "      <td>36.505973</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>g288</th>\n",
       "      <td>19</td>\n",
       "      <td>41.990097</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>g316</th>\n",
       "      <td>22</td>\n",
       "      <td>44.613344</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          Weight (g)  Tumor Volume (mm3)\n",
       "Mouse ID                                \n",
       "b128              22           41.963636\n",
       "b742              21           40.083699\n",
       "f966              17           36.505973\n",
       "g288              19           41.990097\n",
       "g316              22           44.613344"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Generate a scatter plot of mouse weight versus average tumor volume for the Capomulin regimen\n",
    "\n",
    "# Create DataFrame for Capomulin with Weight and Tumor Volume Average: \n",
    "Capomulin_df_2 =  new_index_df.loc[[\"Capomulin\"],[\"Mouse ID\",\"Weight (g)\",\"Tumor Volume (mm3)\"]]\n",
    "Capomulin_groupby_df = Capomulin_df_2.groupby(\"Mouse ID\").mean()\n",
    "Capomulin_groupby_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The r-squared is: 0.8419363424694718\n"
     ]
    }
   ],
   "source": [
    "# Draw Scatter Plot: \n",
    "x_axis = Capomulin_groupby_df[\"Weight (g)\"]\n",
    "data = Capomulin_groupby_df[\"Tumor Volume (mm3)\"]\n",
    "plt.scatter(x_axis, data, marker=\"^\", facecolors=\"red\", edgecolors=\"black\",\n",
    "            s=x_axis, alpha=0.75)\n",
    "# Formatting: \n",
    "plt.title(\"Capomulin Treatment Weight and Tumor Volume\")\n",
    "plt.xlabel(\"Weight (g)\")\n",
    "plt.ylabel(\"Tumor Volume (mm3)\")\n",
    "\n",
    "# Calculate the correlation coefficient and linear regression model for mouse weight and average tumor volume for the Capomulin regimen\n",
    "(slope, intercept, rvalue, pvalue, stderr) = linregress(x_axis, data)\n",
    "regress_values = x_axis * slope + intercept\n",
    "line_eq = \"y = \" + str(round(slope,2)) + \"x + \" + str(round(intercept,2))\n",
    "\n",
    "plt.scatter(x_axis,data)\n",
    "plt.plot(x_axis,regress_values,\"r-\")\n",
    "plt.annotate(line_eq,(0,50),fontsize=15,color=\"red\")\n",
    "\n",
    "\n",
    "plt.show()\n",
    "print(f\"The r-squared is: {rvalue}\")"
   ]
  }
 ],
 "metadata": {
  "anaconda-cloud": {},
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
